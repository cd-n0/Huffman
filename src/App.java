/*
 * This source file was generated by the Gradle 'init' task
 */
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;

public class App {
    private static final boolean DEBUG = false;
    public static void main(String[] args) {
        tuiMethod();
    }

    public static void tuiMethod(){
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to Huffman encoder and decoder");

        boolean invalidChoice = true;
        boolean reuse = false;

        while (invalidChoice || reuse) {
        System.out.println("Please select encoder or decoder");
        System.out.println("1.Encoder");
        System.out.println("2.Decoder");
        System.out.println("3.Exit Program"); System.out.print("> ");

        int choice = scanner.nextInt();
        scanner.nextLine();
            switch (choice){
                case 1:
                    invalidChoice = false;
                    try {
                        encodingMethod(scanner);
                    }
                    catch (FileNotFoundException e) {
                        if(DEBUG)e.printStackTrace();
                        System.out.println("File not found");
                    }
                    catch (IOException e) {
                        if(DEBUG)e.printStackTrace();
                        System.out.println("There was an issue with system input/output");
                    }
                    reuse = reusePrompt(scanner);
                    break;
                case 2:
                    invalidChoice = false;
                    try {
                        decodingMethod(scanner);
                    }
                    catch (ClassNotFoundException e) {
                        if(DEBUG)e.printStackTrace();
                        System.out.println("Could't find the class");
                    }
                    catch (FileNotFoundException e) {
                        if(DEBUG)e.printStackTrace();
                        System.out.println("File not found");
                    }
                    catch (IOException e) {
                        if(DEBUG)e.printStackTrace();
                        System.out.println("There was an issue with system input/output");
                    }
                    reuse = reusePrompt(scanner);
                    break;
                case 3:
                    invalidChoice = false;
                    break;
                default:
                    invalidChoice = true;
                    System.out.println("Invalid selection, please try again.");
                    continue;
            }

        }
        scanner.close();
        quitMethod();
    }

    public static boolean reusePrompt(Scanner scanner){
        System.out.print("Again? y/N: ");
        String choice = scanner.nextLine();
        if (choice.equalsIgnoreCase("y")) return true;
        else return false;
    }

    public static void encodingMethod(Scanner scanner) throws FileNotFoundException, IOException
    {
        String input = "";
        System.out.println("Please select the method for inputting your string.");
        System.out.println("1.Text input");
        System.out.println("2.File input");
        System.out.print("> ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                System.out.print("Please input the text here: ");
                input = scanner.nextLine();

                if (input.isEmpty()) {
                    System.out.println("Empty filename, restarting");
                    tuiMethod();
                } else {
                    Huffman huffman = new Huffman(input);
                    System.out.println(huffman.getEncodedString());
                    System.out.println("Compressed to its " + huffman.getCompressionPercentage() + "%");
                    System.out.print("Would you like to serialize? Y/n: ");
                    String doSerialization = scanner.nextLine();

                    if (!doSerialization.equalsIgnoreCase("n")) {
                        System.out.print("Input a filename for the serialized class: ");
                        String serFileName = scanner.nextLine();
                        // Perform serialization
                        FileIO.Serialize(serFileName, huffman);
                    }
                    System.out.print("Would you like to write it to a file? Y/n: ");
                    String writeToFile = scanner.nextLine();
                    if (!writeToFile.equalsIgnoreCase("n")) {
                        System.out.print("Input a file name/path for the output file: ");
                        String outputFileName = scanner.nextLine();
                        FileIO.writeBinaryFile(outputFileName, BinaryStringHelper.stringToBytes(huffman.getEncodedString()));
                    }
                }
                break;

            case 2:
                System.out.print("Please input the file name/path you want to process: ");
                String fileName = scanner.nextLine();
                input = FileIO.readFile(fileName);

                Huffman huffman = new Huffman(input);

                System.out.println(huffman.getEncodedString());
                System.out.println("Compressed to its " + huffman.getCompressionPercentage() + "%");
                System.out.print("Would you like to serialize? Y/n: ");
                String doSerialization = scanner.nextLine();
                if (!doSerialization.equalsIgnoreCase("n")) {
                    System.out.print("Input a filename for the serialized class: ");
                    String serFileName = scanner.nextLine();
                    // Serialization for buffer
                    FileIO.Serialize(serFileName, huffman);
                }

                System.out.print("Would you like to write it to a file? Y/n: ");
                String writeToFile = scanner.nextLine();
                if (!writeToFile.equalsIgnoreCase("n")) {
                    System.out.print("Input a file name/path for the output file: ");
                    String outputFileName = scanner.nextLine();
                    FileIO.writeBinaryFile(outputFileName, BinaryStringHelper.stringToBytes(huffman.getEncodedString()));
                }
                break;

            default:
                System.out.println("Incorrect Input");
                break;
        }
    }

    public static void quitMethod()
    {
        System.exit(0);
    }

    public static void decodingMethod(Scanner scanner) throws IOException, FileNotFoundException, ClassNotFoundException
    {
        // Please give .ser file and encoding string
        String input = "";
        String fileName = "";
        System.out.println("Please select the method for inputting your string.");
        System.out.println("1.Text input");
        System.out.println("2.File input");
        System.out.print("> ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                System.out.print("Please input the text here: ");
                input = scanner.nextLine();

                if (input.isEmpty()) {
                    System.out.println("Empty filename, restarting");
                    tuiMethod();
                } else {
                    System.out.print("Please input the .ser file name/path to be used: ");
                    String serializedFile = scanner.nextLine();

                    Huffman huffman = new Huffman(input, serializedFile);
                    if(huffman.getDecodedString() != null){
                        System.out.println(huffman.getDecodedString());
                        System.out.print("Would you like to write it to a file? Y/n: ");
                        String writeToFile = scanner.nextLine();
                        if (!writeToFile.equalsIgnoreCase("n")) {
                            System.out.print("Input a file name/path for the output file: ");
                            fileName = scanner.nextLine();
                            FileIO.writeFile(fileName, huffman.getDecodedString());
                        }
                    } else {
                        System.out.println("The returned string was null");
                    }
                }
                break;

            case 2:
                System.out.print("Please input the file name/path you want to process: ");
                fileName = scanner.nextLine();
                byte[] binaryInput = FileIO.readBinaryFile(fileName);
                input = BinaryStringHelper.bytesToString(binaryInput);
                if(DEBUG)System.out.println(input);
                System.out.print("Please input the .ser file name/path to be used: ");
                String serializedFile = scanner.nextLine();

                Huffman huffman = new Huffman(input, serializedFile);
                System.out.println(huffman.getDecodedString());
                System.out.print("Would you like to write it to a file? Y/n: ");
                String writeToFile = scanner.nextLine();
                if (!writeToFile.equalsIgnoreCase("n")) {
                    System.out.print("Input a file name/path for the output file: ");
                    fileName = scanner.nextLine();
                    FileIO.writeFile(fileName, huffman.getDecodedString());
                }

                break;

            default:
                System.out.println("Incorrect Input");
                break;
        }
    }
}
